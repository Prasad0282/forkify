{"mappings":"AAAA,MAAM,kBAAkB,SAAS,aAAa,CAAC;AAE/C,MAAM,UAAU,SAAU,CAAC;IACzB,OAAO,IAAI,QAAQ,SAAU,CAAC,EAAE,MAAM;QACpC,WAAW;YACT,OAAO,IAAI,MAAM,CAAC,qCAAqC,EAAE,EAAE,OAAO,CAAC;QACrE,GAAG,IAAI;IACT;AACF;AAEA,eAAe;IACb,IAAI;QACF,MAAM,MAAM,MAAM,MAChB;QAEF,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC;QAE9D,IAAI,KAAK,OAAO,KAAK,GAAG;YACtB,QAAQ,GAAG,CAAC;YACZ;QACF;QAEA,2CAA2C;QAC3C,IAAI,EAAE,OAAO,EAAE,GAAG,KAAK,IAAI;QAE3B,IAAI,WAAW,QAAQ,MAAM,GAAG,GAAG;YACjC,6BAA6B;YAC7B,UAAU,QAAQ,GAAG,CAAC,CAAA,SAAW,CAAA;oBAC/B,IAAI,OAAO,EAAE;oBACb,OAAO,OAAO,KAAK;oBACnB,WAAW,OAAO,SAAS;oBAC3B,WAAW,OAAO,UAAU;oBAC5B,OAAO,OAAO,SAAS;oBACvB,UAAU,OAAO,QAAQ;oBACzB,aAAa,OAAO,YAAY;oBAChC,aAAa,OAAO,WAAW;gBACjC,CAAA;YAEA,QAAQ,GAAG,CAAC;QACd,OACE,QAAQ,GAAG,CAAC;IAEhB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,2BAA2B;IAC3C;AACF;AAEA,wDAAwD;AACxD,SAAS,MAAM,EAAE;IACf,OAAO,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;AACpD;AAEA,eAAe;IACb,IAAI;QACF,MAAM;QACN,MAAM,MAAM,OAAO,uCAAuC;IAC1D,uDAAuD;IACzD,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,2BAA2B;IAC3C;AACF;AAEA","sources":["src/js/controller.js"],"sourcesContent":["const recipeContainer = document.querySelector('.recipe');\n\nconst timeout = function (s) {\n  return new Promise(function (_, reject) {\n    setTimeout(function () {\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\n    }, s * 1000);\n  });\n};\n\nasync function showRecipes() {\n  try {\n    const res = await fetch(\n      'https://forkify-api.herokuapp.com/api/v2/recipes?search=pizza'\n    );\n    const data = await res.json();\n\n    if (!res.ok) throw new Error(`${data.message} (${res.status})`);\n\n    if (data.results === 0) {\n      console.log('No recipes found for the given search term.');\n      return;\n    }\n\n    // Destructure recipes array from data.data\n    let { recipes } = data.data;\n\n    if (recipes && recipes.length > 0) {\n      // Map and format each recipe\n      recipes = recipes.map(recipe => ({\n        id: recipe.id,\n        title: recipe.title,\n        publisher: recipe.publisher,\n        sourceUrl: recipe.source_url,\n        image: recipe.image_url,\n        servings: recipe.servings,\n        cookingTime: recipe.cooking_time,\n        ingredients: recipe.ingredients,\n      }));\n\n      console.log(recipes);\n    } else {\n      console.log('No recipes available in the response.');\n    }\n  } catch (err) {\n    console.error('Error fetching recipes:', err);\n  }\n}\n\n// Function to delay execution by specified milliseconds\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function showRecipesWithDelay() {\n  try {\n    await showRecipes();\n    await delay(2000); // Delay for 2 seconds between requests\n    // Add additional calls to showRecipes() here if needed\n  } catch (err) {\n    console.error('Error fetching recipes:', err);\n  }\n}\n\nshowRecipesWithDelay();\n"],"names":[],"version":3,"file":"index.62406edb.js.map","sourceRoot":"/__parcel_source_root/"}