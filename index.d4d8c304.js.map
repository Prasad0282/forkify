{"mappings":"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","sources":["src/js/new.js"],"sourcesContent":["const recipeContainer = document.querySelector('.recipe');\n\nconst timeout = function (s) {\n  return new Promise(function (_, reject) {\n    setTimeout(function () {\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\n    }, s * 1000);\n  });\n};\n\nasync function showRecipes() {\n  try {\n    const res = await fetch(\n      'https://forkify-api.herokuapp.com/api/v2/recipes?search=pizza'\n    );\n    const data = await res.json();\n\n    if (!res.ok) throw new Error(`${data.message} (${res.status})`);\n\n    if (data.results === 0) {\n      console.log('No recipes found for the given search term.');\n      return;\n    }\n\n    // Destructure recipes array from data.data\n    let { recipes } = data.data;\n\n    if (recipes && recipes.length > 0) {\n      // Map and format each recipe\n      recipes = await enhanceRecipes(recipes);\n\n      if (recipes.length > 0) {\n        console.log(recipes);\n      } else {\n        console.log('No recipes available after enhancing.');\n      }\n    } else {\n      console.log('No recipes available in the response.');\n    }\n    //rendering recipe\n    const markup = `\n        <figure class=\"recipe__fig\">\n        <img src=\"${recipes.image}\" alt=\"Tomato\" class=\"recipe__img\" />\n        <h1 class=\"recipe__title\">\n          <span>${recipes.title}</span>\n        </h1>\n      </figure>\n\n      <div class=\"recipe__details\">\n        <div class=\"recipe__info\">\n          <svg class=\"recipe__info-icon\">\n            <use href=\"src/img/icons.svg#icon-clock\"></use>\n          </svg>\n          <span class=\"recipe__info-data recipe__info-data--minutes\">${\n            recipes.cookingTime\n          }</span>\n          <span class=\"recipe__info-text\">minutes</span>\n        </div>\n        <div class=\"recipe__info\">\n          <svg class=\"recipe__info-icon\">\n            <use href=\"src/img/icons.svg#icon-users\"></use>\n          </svg>\n          <span class=\"recipe__info-data recipe__info-data--people\">${\n            recipes.servings\n          }</span>\n          <span class=\"recipe__info-text\">servings</span>\n\n          <div class=\"recipe__info-buttons\">\n            <button class=\"btn--tiny btn--increase-servings\">\n              <svg>\n                <use href=\"src/img/icons.svg#icon-minus-circle\"></use>\n              </svg>\n            </button>\n            <button class=\"btn--tiny btn--increase-servings\">\n              <svg>\n                <use href=\"src/img/icons.svg#icon-plus-circle\"></use>\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        <div class=\"recipe__user-generated\">\n          <svg>\n            <use href=\"src/img/icons.svg#icon-user\"></use>\n          </svg>\n        </div>\n        <button class=\"btn--round\">\n          <svg class=\"\">\n            <use href=\"src/img/icons.svg#icon-bookmark-fill\"></use>\n          </svg>\n        </button>\n      </div>\n\n      <div class=\"recipe__ingredients\">\n        <h2 class=\"heading--2\">Recipe ingredients</h2>\n        <ul class=\"recipe__ingredient-list\">\n        ${recipes.ingredients\n          .map(ing => {\n            return `<li class=\"recipe__ingredient\">\n              <svg class=\"recipe__icon\">\n                <use href=\"src/img/icons.svg#icon-check\"></use>\n              </svg>\n              <div class=\"recipe__quantity\">${ing.quantity}</div>\n              <div class=\"recipe__description\">\n                <span class=\"recipe__unit\">${ing.unit}</span>\n                ${ing.description}\n              </div>\n            </li>`;\n          })\n          .join('')}\n      \n      </div>\n\n      <div class=\"recipe__directions\">\n        <h2 class=\"heading--2\">How to cook it</h2>\n        <p class=\"recipe__directions-text\">\n          This recipe was carefully designed and tested by\n          <span class=\"recipe__publisher\">${\n            recipes.publisher\n          }</span>. Please check out\n          directions at their website.\n        </p>\n        <a\n          class=\"btn--small recipe__btn\"\n          href=\"${recipes.sourceUrl}\"\n          target=\"_blank\"\n        >\n          <span>Directions</span>\n          <svg class=\"search__icon\">\n            <use href=\"src/img/icons.svg#icon-arrow-right\"></use>\n          </svg>\n        </a>\n      </div>\n        `;\n    recipeContainer.innerHTML = '';\n    recipeContainer.insertAdjacentHTML('afterbegin', markup);\n  } catch (err) {\n    console.error('Error fetching recipes:', err);\n    alert('Error fetching recipes. Please try again later.', err);\n  }\n}\n\n// Define a function to enhance recipes with additional details\nconst enhanceRecipes = async recipes => {\n  // Array to store promises for fetching details of each recipe\n  const fetchPromises = recipes.map(async recipe => {\n    try {\n      const res = await fetch(\n        `https://forkify-api.herokuapp.com/api/v2/recipes/${recipe.id}`\n      );\n      const data = await res.json();\n      if (!res.ok) throw new Error(`${data.message} (${res.status})`);\n\n      // Update the recipe object with additional details\n      recipe.servings = data.data.recipe.servings;\n      recipe.cookingTime = data.data.recipe.cooking_time;\n      recipe.ingredients = data.data.recipe.ingredients;\n\n      return recipe;\n    } catch (error) {\n      console.error(`Error fetching details for recipe ${recipe.id}:`, error);\n      return null;\n    }\n  });\n\n  // Wait for all promises to resolve\n  const enhancedRecipes = await Promise.all(fetchPromises);\n\n  // Filter out any null values (failed fetches)\n  return enhancedRecipes.filter(recipe => recipe !== null);\n};\n\n// Function to delay execution by specified milliseconds\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function showRecipesWithDelay() {\n  try {\n    await showRecipes();\n    await delay(2000); // Delay for 2 seconds between requests\n    // Add additional calls to showRecipes() here if needed\n  } catch (err) {\n    console.error('Error fetching recipes:', err);\n  }\n}\n\nshowRecipesWithDelay();\n"],"names":[],"version":3,"file":"index.d4d8c304.js.map","sourceRoot":"/__parcel_source_root/"}